<?xml version="1.0" encoding="UTF-8" ?>
<ChoregrapheProject xmlns="http://www.aldebaran-robotics.com/schema/choregraphe/project.xsd" xar_version="3">
    <Box name="root" id="-1" localization="8" tooltip="Root box of Choregraphe&apos;s behavior. Highest level possible." x="0" y="0">
        <bitmap>media/images/box/root.png</bitmap>
        <script language="4">
            <content>
                <![CDATA[]]>
</content>
        </script>
        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
        <Input name="BarcodeReader/BarcodeDetected" type="0" type_size="1" nature="4" stm_value_name="BarcodeReader/BarcodeDetected" inner="1" tooltip="BarcodeReader/BarcodeDetected desc" id="4" />
        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="5" />
        <Timeline enable="0">
            <BehaviorLayer name="behavior_layer1">
                <BehaviorKeyframe name="keyframe1" index="1">
                    <Diagram>
                        <Box name="QR Code Reader" id="2" localization="8" tooltip="Registers NAO for use with the Watson Robotics SDK by reading a QQR code." x="147" y="103">
                            <bitmap>media/images/box/watson-lib-icons/watson_qr_icon.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[from os.path import expanduser

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.barcode=ALProxy("ALBarcodeReader")
        self.tts = ALProxy("ALTextToSpeech")
        self.memory=ALProxy("ALMemory")

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        #self.onStopped() #activate the output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box

    def onInput_onScanned(self, p):
        try:
            key = p[0][0]

            self.tts.say("I got it! I'll continue with setup now.")
            self.logger.info("{}".format(key))
            if not os.path.exists(expanduser("~") + '/.watson/'):
                os.makedirs(expanduser("~") + '/.watson/')
            f = open(expanduser("~") + "/" +'.watson/license.wat', 'w+')
            f.write("{}".format(key))
            f.close()
            self.onStopped()

        except IndexError:
            self.log("QR Code was unable to be read")]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Input name="onScanned" type="0" type_size="1" nature="1" inner="0" tooltip="" id="4" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="5" />
                        </Box>
                        <Box name="QR Trigger" id="1" localization="8" tooltip="" x="77" y="0">
                            <bitmap>media/images/box/box-python-script.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.barcode=ALProxy("ALBarcodeReader")
        self.tts = ALProxy("ALTextToSpeech")
        self.memory=ALProxy("ALMemory")

    def onUnload(self):
        pass

    def onInput_QRCodeDetected(self, p):
        try:
            qr = p[0][0]
            #try:
            #   #check memory for qr -- if error, then not in memory
            #    scanned = self.memory.getData(qr)
            #    if not scanned:
            #        self.memory.insertData(qr, True)
            #        self.onStopped(qr)
            #except:
            self.memory.insertData(qr, True)
            self.onStopped("{}".format(qr))
        except IndexError:
            self.log("QR Code was unable to be read")]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="QR Code Detected" type="0" type_size="1" nature="1" inner="0" tooltip="" id="2" />
                            <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                        </Box>
                        <Box name="QR Reader" id="3" localization="8" tooltip="" x="203" y="0">
                            <bitmap>media/images/box/box-python-script.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[from os.path import expanduser

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.barcode=ALProxy("ALBarcodeReader")
        self.tts = ALProxy("ALTextToSpeech")

    def onUnload(self):
        pass

    def onInput_onStart(self, p):
        self.tts.say("I got it! I'll continue with setup now.")
        self.logger.info("{}".format(p))
        if not os.path.exists(expanduser("~") + '/.watson/'):
            os.makedirs(expanduser("~") + '/.watson/')
        f = open(expanduser("~") + "/" +'.watson/license.wat', 'w+')
        f.write("{}".format(p))
        f.close()
        self.onStopped()]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                        </Box>
                        <Link inputowner="3" indexofinput="2" outputowner="1" indexofoutput="3" />
                        <Link inputowner="0" indexofinput="5" outputowner="3" indexofoutput="3" />
                        <Link inputowner="0" indexofinput="5" outputowner="2" indexofoutput="5" />
                        <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="4" />
                    </Diagram>
                </BehaviorKeyframe>
            </BehaviorLayer>
        </Timeline>
    </Box>
</ChoregrapheProject>
